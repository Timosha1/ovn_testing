# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Проверка API пулов для разных пар >> Test WETH/USDC Pancake in the API response (Chain ID: 42161)
- Location: C:\Users\79779\WebstormProjects\study\tests\api_tests\pools_page\pools.spec.ts:93:5

# Error details

```
Error: Пул 0xd9e2a1a61B6E61b275cEc326465d417e52C1b95cР не найден в ответе API

expect(received).toBeDefined()

Received: undefined
    at C:\Users\79779\WebstormProjects\study\tests\api_tests\pools_page\pools.spec.ts:119:73
```

# Test source

```ts
   19 |   {
   20 |     search: 'WETH/USD+',
   21 |     chainId: '8453',
   22 |     platform: 'Aerodrome',
   23 |     expectedPoolName: 'WETH/USD+',
   24 |     expectedToken0Symbol: 'WETH',
   25 |     expectedToken1Symbol: 'USD+',
   26 |     expectedPoolAddress: '0x4D69971CCd4A636c403a3C1B00c85e99bB9B5606',
   27 |   },
   28 |   {
   29 |     search: 'USDC/USD+',
   30 |     chainId: '8453',
   31 |     platform: 'Pancake',
   32 |     expectedPoolName: 'USDC/USD+',
   33 |     expectedToken0Symbol: 'USDC',
   34 |     expectedToken1Symbol: 'USD+',
   35 |     expectedPoolAddress: '0x167c9F0AF189DDF58f4B43683404a45096c23b67',
   36 |   },
   37 |   {
   38 |     search: 'WETH/XUSD',
   39 |     chainId: '42161',
   40 |     platform: 'Uniswap',
   41 |     expectedPoolName: 'WETH/XUSD',
   42 |     expectedToken0Symbol: 'WETH',
   43 |     expectedToken1Symbol: 'XUSD',
   44 |     expectedPoolAddress: '0x421803da50d3932caa36bd1731d36a0e2af93542',
   45 |   },
   46 |   {
   47 |     search: 'BSC-USD/WBNB',
   48 |     chainId: '56',
   49 |     platform: 'Pancake',
   50 |     expectedPoolName: 'BSC-USD/WBNB',
   51 |     expectedToken0Symbol: 'BSC-USD',
   52 |     expectedToken1Symbol: 'WBNB',
   53 |     expectedPoolAddress: '0x36696169C63e42cd08ce11f5deeBbCeBae652050',
   54 |   },
   55 |   {
   56 |     search: 'WETH/AERO',
   57 |     chainId: '8453',
   58 |     platform: 'Uniswap',
   59 |     expectedPoolName: 'WETH/AERO',
   60 |     expectedToken0Symbol: 'WETH',
   61 |     expectedToken1Symbol: 'AERO',
   62 |     expectedPoolAddress: '0x3d5d143381916280ff91407febeb52f2b60f33cf',
   63 |   },
   64 |   {
   65 |     search: 'WETH/USDC',
   66 |     chainId: '8453',
   67 |     platform: 'Pancake',
   68 |     expectedPoolName: 'WETH/USDC',
   69 |     expectedToken0Symbol: 'WETH',
   70 |     expectedToken1Symbol: 'USDC',
   71 |     expectedPoolAddress: '0x72AB388E2E2F6FaceF59E3C3FA2C4E29011c2D38',
   72 |   },
   73 |   {
   74 |     search: 'WETH/USDC',
   75 |     chainId: '42161',
   76 |     platform: 'Pancake',
   77 |     expectedPoolName: 'WETH/USDC',
   78 |     expectedToken0Symbol: 'WETH',
   79 |     expectedToken1Symbol: 'USDC',
   80 |     expectedPoolAddress: '0xd9e2a1a61B6E61b275cEc326465d417e52C1b95cР',
   81 |   }
   82 | ];
   83 |
   84 | test.describe('Проверка API пулов для разных пар', () => {
   85 |   for (const{
   86 |     search,
   87 |     chainId,
   88 |     platform,
   89 |     expectedPoolName,
   90 |     expectedPoolAddress,
   91 |   } of poolTestCases){
   92 |
   93 |     test(`Test ${expectedPoolName} ${platform} in the API response (Chain ID: ${chainId})`, async ({
   94 |                                                                                                      request
   95 |                                                                                                    }) => {
   96 |       const queryParams = {
   97 |         search,
   98 |         chainId,
   99 |         platform,
  100 |         poolAddress: expectedPoolAddress,
  101 |       };
  102 |
  103 |       const response = await request.get(baseUrl, {
  104 |         params: queryParams,
  105 |       });
  106 |
  107 |       expect(response.status()).toBe(200);
  108 |
  109 |       const body: PoolsResponse = await response.json();
  110 |       expect(body, 'Ответ API должен быть объектом').toBeDefined();
  111 |       expect(Array.isArray(body.pools), 'body.pools должен быть массивом').toBe(true);
  112 |       expect(body.pools.length, 'В ответе должен быть хотя бы один пул').toBeGreaterThan(0)
  113 |       console.log(body.pools)
  114 |
  115 |       const pool: Pool | undefined = body.pools.find((pool: Pool) => {
  116 |         return pool.poolAddress === expectedPoolAddress;
  117 |       });
  118 |
> 119 |       expect(pool, `Пул ${expectedPoolAddress} не найден в ответе API`).toBeDefined();
      |                                                                         ^ Error: Пул 0xd9e2a1a61B6E61b275cEc326465d417e52C1b95cР не найден в ответе API
  120 |       expect(pool?.poolAddress).toBe(expectedPoolAddress);
  121 |     });
  122 |   }
  123 | });
```