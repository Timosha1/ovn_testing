# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Portfolio api status and array length
- Location: C:\Users\79779\WebstormProjects\study\tests\api_tests\stats_page\base_ovnplus\portfolio.spec.ts:20:1

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 502
    at C:\Users\79779\WebstormProjects\study\tests\api_tests\stats_page\base_ovnplus\portfolio.spec.ts:22:38
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 |
   3 | const portfolioApi =  "https://backend.overnight.fi/strategy/base/ovn+/portfolio";
   4 | const totalSupplyApi =  "https://backend.overnight.fi/stat/base/OVN+/total-supply";
   5 | const acceptableInaccuracy = 1000;
   6 |
   7 | interface strategies {
   8 |   address: string;
   9 |   explorerAddress: string;
  10 |   collateralToken: string;
  11 |   name: string;
  12 |   weight: string;
  13 |   netAssetValue: string;
  14 |   liquidationValue: string;
  15 |   riskFactor: string;
  16 |   block: number;
  17 |   timestamp: number;
  18 | }
  19 |
  20 | test("Portfolio api status and array length", async ({ request }) => {
  21 |   const responsePortfolio = await request.get(portfolioApi);
> 22 |   expect(responsePortfolio.status()).toBe(200);
     |                                      ^ Error: expect(received).toBe(expected) // Object.is equality
  23 |   const strategies: strategies[] = await responsePortfolio.json();
  24 |   expect(strategies.length).toBeGreaterThan(0);
  25 | });
  26 |
  27 | test("Sum of strategies balance", async ({ request }) => {
  28 |   const responsePortfolio = await request.get(portfolioApi);
  29 |   const responseSupply = await request.get(totalSupplyApi);
  30 |   const responsePortfolioBody = await responsePortfolio.json();
  31 |   const responseSupplyBody = await responseSupply.json();
  32 |   const strategiesSum: number = responsePortfolioBody.reduce(
  33 |     (sum: number, item: strategies) => sum + parseFloat(item.netAssetValue),
  34 |     0
  35 |   );
  36 |   const difference = Math.abs(strategiesSum - responseSupplyBody);
  37 |   expect(difference).toBeLessThanOrEqual(acceptableInaccuracy);
  38 | });
  39 |
```