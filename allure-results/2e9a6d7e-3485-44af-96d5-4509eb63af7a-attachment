# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Sum of collateral balance
- Location: C:\Users\79779\WebstormProjects\study\tests\api_tests\stats_page\base_usdplus\collateral.spec.ts:24:1

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 502
    at C:\Users\79779\WebstormProjects\study\tests\api_tests\stats_page\base_usdplus\collateral.spec.ts:26:39
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 |
   3 | const collateralApi =  "https://backend.overnight.fi/strategy/base/usd+/collateral";
   4 | const totalSupplyApi =  "https://backend.overnight.fi/stat/base/usd+/total-supply";
   5 | const acceptableInaccuracy = 1000;
   6 | const pctAcceptableInaccuracy = 1;
   7 |
   8 | interface Collateral {
   9 |   name: string;
  10 |   netAssetValue: string;
  11 |   percentage: string;
  12 |   timestamp: number;
  13 |   address: string;
  14 |   explorerAddress: string;
  15 | }
  16 |
  17 | test("Collateral Status", async ({ request }) => {
  18 |   const response = await request.get(collateralApi);
  19 |   expect(response.status()).toBe(200);
  20 |   const collateral: Collateral[] = await response.json();
  21 |   expect(collateral.length).toBeGreaterThan(0);
  22 | });
  23 |
  24 | test("Sum of collateral balance", async ({ request }) => {
  25 |   const responseCollateral = await request.get(collateralApi);
> 26 |   expect(responseCollateral.status()).toBe(200);
     |                                       ^ Error: expect(received).toBe(expected) // Object.is equality
  27 |   const collateralBody = await responseCollateral.json();
  28 |   const responseSupply = await request.get(totalSupplyApi);
  29 |   const responseSupplyBody = await responseSupply.json();
  30 |   const collateralSum: number = collateralBody.reduce(
  31 |     (sum: number, item: Collateral) => sum + parseFloat(item.netAssetValue),
  32 |     0
  33 |   );
  34 |   const difference = Math.abs(collateralSum - responseSupplyBody);
  35 |   expect(difference).toBeLessThanOrEqual(acceptableInaccuracy);
  36 | });
  37 |
  38 | test("Sum of collateral percentages", async ({ request }) => {
  39 |   const responseCollateral = await request.get(collateralApi);
  40 |   const collateralBody = await responseCollateral.json();
  41 |   const collateralPct: number = collateralBody.reduce(
  42 |     (sum: number, item: Collateral) => sum + parseFloat(item.percentage),
  43 |     0
  44 |   );
  45 |   const difference = Math.abs(collateralPct - 100);
  46 |   expect(difference).toBeLessThanOrEqual(pctAcceptableInaccuracy);
  47 | });
  48 |
```